'use strict';

exports.__esModule = true;

exports.default = function (opts) {
    if (isAllFilteringOptionsAreUndefined(opts)) return void 0;

    opts = prepareOptionValues(opts);

    return createFilterFn(opts);
};

var _lodash = require('lodash');

var _optionConversion = require('../configuration/option-conversion');

function isAllFilteringOptionsAreUndefined(opts) {
    return [opts.testGrep, opts.fixtureGrep, opts.testMeta, opts.fixtureMeta, opts.test, opts.fixture].every(item => item === void 0);
}

function prepareOptionValues(opts) {
    opts.testGrep = (0, _optionConversion.optionValueToRegExp)('--test-grep', opts.testGrep);
    opts.fixtureGrep = (0, _optionConversion.optionValueToRegExp)('--fixture-grep', opts.fixtureGrep);
    opts.testMeta = (0, _optionConversion.optionValueToKeyValue)('--test-meta', opts.testMeta);
    opts.fixtureMeta = (0, _optionConversion.optionValueToKeyValue)('--fixture-meta', opts.fixtureMeta);

    return opts;
}

function createFilterFn(opts) {
    return (testName, fixtureName, fixturePath, testMeta, fixtureMeta) => {
        if (opts.test && testName !== opts.test) return false;

        if (opts.testGrep && !opts.testGrep.test(testName)) return false;

        if (opts.fixture && fixtureName !== opts.fixture) return false;

        if (opts.fixtureGrep && !opts.fixtureGrep.test(fixtureName)) return false;

        if (opts.testMeta && !(0, _lodash.isMatch)(testMeta, opts.testMeta)) return false;

        if (opts.fixtureMeta && !(0, _lodash.isMatch)(fixtureMeta, opts.fixtureMeta)) return false;

        return true;
    };
}

module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXQtZmlsdGVyLWZuLmpzIl0sIm5hbWVzIjpbIm9wdHMiLCJpc0FsbEZpbHRlcmluZ09wdGlvbnNBcmVVbmRlZmluZWQiLCJwcmVwYXJlT3B0aW9uVmFsdWVzIiwiY3JlYXRlRmlsdGVyRm4iLCJ0ZXN0R3JlcCIsImZpeHR1cmVHcmVwIiwidGVzdE1ldGEiLCJmaXh0dXJlTWV0YSIsInRlc3QiLCJmaXh0dXJlIiwiZXZlcnkiLCJpdGVtIiwidGVzdE5hbWUiLCJmaXh0dXJlTmFtZSIsImZpeHR1cmVQYXRoIl0sIm1hcHBpbmdzIjoiOzs7O2tCQStDZSxVQUFVQSxJQUFWLEVBQWdCO0FBQzNCLFFBQUlDLGtDQUFrQ0QsSUFBbEMsQ0FBSixFQUNJLE9BQU8sS0FBSyxDQUFaOztBQUVKQSxXQUFPRSxvQkFBb0JGLElBQXBCLENBQVA7O0FBRUEsV0FBT0csZUFBZUgsSUFBZixDQUFQO0FBQ0gsQzs7QUF0REQ7O0FBQ0E7O0FBRUEsU0FBU0MsaUNBQVQsQ0FBNENELElBQTVDLEVBQWtEO0FBQzlDLFdBQU8sQ0FDSEEsS0FBS0ksUUFERixFQUVISixLQUFLSyxXQUZGLEVBR0hMLEtBQUtNLFFBSEYsRUFJSE4sS0FBS08sV0FKRixFQUtIUCxLQUFLUSxJQUxGLEVBTUhSLEtBQUtTLE9BTkYsRUFPTEMsS0FQSyxDQU9DQyxRQUFRQSxTQUFTLEtBQUssQ0FQdkIsQ0FBUDtBQVFIOztBQUVELFNBQVNULG1CQUFULENBQThCRixJQUE5QixFQUFvQztBQUNoQ0EsU0FBS0ksUUFBTCxHQUFtQiwyQ0FBb0IsYUFBcEIsRUFBbUNKLEtBQUtJLFFBQXhDLENBQW5CO0FBQ0FKLFNBQUtLLFdBQUwsR0FBbUIsMkNBQW9CLGdCQUFwQixFQUFzQ0wsS0FBS0ssV0FBM0MsQ0FBbkI7QUFDQUwsU0FBS00sUUFBTCxHQUFtQiw2Q0FBc0IsYUFBdEIsRUFBcUNOLEtBQUtNLFFBQTFDLENBQW5CO0FBQ0FOLFNBQUtPLFdBQUwsR0FBbUIsNkNBQXNCLGdCQUF0QixFQUF3Q1AsS0FBS08sV0FBN0MsQ0FBbkI7O0FBRUEsV0FBT1AsSUFBUDtBQUNIOztBQUVELFNBQVNHLGNBQVQsQ0FBeUJILElBQXpCLEVBQStCO0FBQzNCLFdBQU8sQ0FBQ1ksUUFBRCxFQUFXQyxXQUFYLEVBQXdCQyxXQUF4QixFQUFxQ1IsUUFBckMsRUFBK0NDLFdBQS9DLEtBQStEO0FBQ2xFLFlBQUlQLEtBQUtRLElBQUwsSUFBYUksYUFBYVosS0FBS1EsSUFBbkMsRUFDSSxPQUFPLEtBQVA7O0FBRUosWUFBSVIsS0FBS0ksUUFBTCxJQUFpQixDQUFDSixLQUFLSSxRQUFMLENBQWNJLElBQWQsQ0FBbUJJLFFBQW5CLENBQXRCLEVBQ0ksT0FBTyxLQUFQOztBQUVKLFlBQUlaLEtBQUtTLE9BQUwsSUFBZ0JJLGdCQUFnQmIsS0FBS1MsT0FBekMsRUFDSSxPQUFPLEtBQVA7O0FBRUosWUFBSVQsS0FBS0ssV0FBTCxJQUFvQixDQUFDTCxLQUFLSyxXQUFMLENBQWlCRyxJQUFqQixDQUFzQkssV0FBdEIsQ0FBekIsRUFDSSxPQUFPLEtBQVA7O0FBRUosWUFBSWIsS0FBS00sUUFBTCxJQUFpQixDQUFDLHFCQUFRQSxRQUFSLEVBQWtCTixLQUFLTSxRQUF2QixDQUF0QixFQUNJLE9BQU8sS0FBUDs7QUFFSixZQUFJTixLQUFLTyxXQUFMLElBQW9CLENBQUMscUJBQVFBLFdBQVIsRUFBcUJQLEtBQUtPLFdBQTFCLENBQXpCLEVBQ0ksT0FBTyxLQUFQOztBQUVKLGVBQU8sSUFBUDtBQUNILEtBcEJEO0FBcUJIIiwiZmlsZSI6InV0aWxzL2dldC1maWx0ZXItZm4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc01hdGNoIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IG9wdGlvblZhbHVlVG9SZWdFeHAsIG9wdGlvblZhbHVlVG9LZXlWYWx1ZSB9IGZyb20gJy4uL2NvbmZpZ3VyYXRpb24vb3B0aW9uLWNvbnZlcnNpb24nO1xuXG5mdW5jdGlvbiBpc0FsbEZpbHRlcmluZ09wdGlvbnNBcmVVbmRlZmluZWQgKG9wdHMpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBvcHRzLnRlc3RHcmVwLFxuICAgICAgICBvcHRzLmZpeHR1cmVHcmVwLFxuICAgICAgICBvcHRzLnRlc3RNZXRhLFxuICAgICAgICBvcHRzLmZpeHR1cmVNZXRhLFxuICAgICAgICBvcHRzLnRlc3QsXG4gICAgICAgIG9wdHMuZml4dHVyZVxuICAgIF0uZXZlcnkoaXRlbSA9PiBpdGVtID09PSB2b2lkIDApO1xufVxuXG5mdW5jdGlvbiBwcmVwYXJlT3B0aW9uVmFsdWVzIChvcHRzKSB7XG4gICAgb3B0cy50ZXN0R3JlcCAgICA9IG9wdGlvblZhbHVlVG9SZWdFeHAoJy0tdGVzdC1ncmVwJywgb3B0cy50ZXN0R3JlcCk7XG4gICAgb3B0cy5maXh0dXJlR3JlcCA9IG9wdGlvblZhbHVlVG9SZWdFeHAoJy0tZml4dHVyZS1ncmVwJywgb3B0cy5maXh0dXJlR3JlcCk7XG4gICAgb3B0cy50ZXN0TWV0YSAgICA9IG9wdGlvblZhbHVlVG9LZXlWYWx1ZSgnLS10ZXN0LW1ldGEnLCBvcHRzLnRlc3RNZXRhKTtcbiAgICBvcHRzLmZpeHR1cmVNZXRhID0gb3B0aW9uVmFsdWVUb0tleVZhbHVlKCctLWZpeHR1cmUtbWV0YScsIG9wdHMuZml4dHVyZU1ldGEpO1xuXG4gICAgcmV0dXJuIG9wdHM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpbHRlckZuIChvcHRzKSB7XG4gICAgcmV0dXJuICh0ZXN0TmFtZSwgZml4dHVyZU5hbWUsIGZpeHR1cmVQYXRoLCB0ZXN0TWV0YSwgZml4dHVyZU1ldGEpID0+IHtcbiAgICAgICAgaWYgKG9wdHMudGVzdCAmJiB0ZXN0TmFtZSAhPT0gb3B0cy50ZXN0KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChvcHRzLnRlc3RHcmVwICYmICFvcHRzLnRlc3RHcmVwLnRlc3QodGVzdE5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmIChvcHRzLmZpeHR1cmUgJiYgZml4dHVyZU5hbWUgIT09IG9wdHMuZml4dHVyZSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAob3B0cy5maXh0dXJlR3JlcCAmJiAhb3B0cy5maXh0dXJlR3JlcC50ZXN0KGZpeHR1cmVOYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAob3B0cy50ZXN0TWV0YSAmJiAhaXNNYXRjaCh0ZXN0TWV0YSwgb3B0cy50ZXN0TWV0YSkpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKG9wdHMuZml4dHVyZU1ldGEgJiYgIWlzTWF0Y2goZml4dHVyZU1ldGEsIG9wdHMuZml4dHVyZU1ldGEpKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChvcHRzKSB7XG4gICAgaWYgKGlzQWxsRmlsdGVyaW5nT3B0aW9uc0FyZVVuZGVmaW5lZChvcHRzKSlcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcblxuICAgIG9wdHMgPSBwcmVwYXJlT3B0aW9uVmFsdWVzKG9wdHMpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUZpbHRlckZuKG9wdHMpO1xufVxuIl19
