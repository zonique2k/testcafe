'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

exports.default = createRequestMock;

var _hook = require('./hook');

var _hook2 = _interopRequireDefault(_hook);

var _testcafeHammerhead = require('testcafe-hammerhead');

var _runtime = require('../../errors/runtime');

var _message = require('../../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

var _warningMessage = require('../../notifications/warning-message');

var _warningMessage2 = _interopRequireDefault(_warningMessage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RequestMock extends _hook2.default {
    constructor() {
        super([]);

        this.pendingRequestFilterRuleInit = null;
        this.mocks = new _map2.default();
    }

    onRequest(event) {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const mock = _this.mocks.get(event._requestFilterRule);

            event.setMock(mock);
        })();
    }

    onResponse(event) {
        var _this2 = this;

        return (0, _asyncToGenerator3.default)(function* () {
            if (event.statusCode === _testcafeHammerhead.SAME_ORIGIN_CHECK_FAILED_STATUS_CODE) _this2.warningLog.addWarning(_warningMessage2.default.requestMockCORSValidationFailed, RequestMock.name, event._requestFilterRule);
        })();
    }

    // API
    onRequestTo(requestFilterRuleInit) {
        if (this.pendingRequestFilterRuleInit) throw new _runtime.APIError('onRequestTo', _message2.default.requestHookConfigureAPIError, RequestMock.name, "The 'respond' method was not called after 'onRequestTo'. You must call the 'respond' method to provide the mocked response.");

        this.pendingRequestFilterRuleInit = requestFilterRuleInit;

        return this;
    }

    respond(body, statusCode, headers) {
        if (!this.pendingRequestFilterRuleInit) throw new _runtime.APIError('respond', _message2.default.requestHookConfigureAPIError, RequestMock.name, "The 'onRequestTo' method was not called before 'respond'. You must call the 'onRequestTo' method to provide the URL requests to which are mocked.");

        const mock = new _testcafeHammerhead.ResponseMock(body, statusCode, headers);
        const rule = new _testcafeHammerhead.RequestFilterRule(this.pendingRequestFilterRuleInit);

        this.requestFilterRules.push(rule);
        this.mocks.set(rule, mock);
        this.pendingRequestFilterRuleInit = null;

        return this;
    }
}

function createRequestMock() {
    return new RequestMock();
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvcmVxdWVzdC1ob29rcy9yZXF1ZXN0LW1vY2suanMiXSwibmFtZXMiOlsiY3JlYXRlUmVxdWVzdE1vY2siLCJSZXF1ZXN0TW9jayIsIlJlcXVlc3RIb29rIiwiY29uc3RydWN0b3IiLCJwZW5kaW5nUmVxdWVzdEZpbHRlclJ1bGVJbml0IiwibW9ja3MiLCJvblJlcXVlc3QiLCJldmVudCIsIm1vY2siLCJnZXQiLCJfcmVxdWVzdEZpbHRlclJ1bGUiLCJzZXRNb2NrIiwib25SZXNwb25zZSIsInN0YXR1c0NvZGUiLCJTQU1FX09SSUdJTl9DSEVDS19GQUlMRURfU1RBVFVTX0NPREUiLCJ3YXJuaW5nTG9nIiwiYWRkV2FybmluZyIsIldBUk5JTkdfTUVTU0FHRSIsInJlcXVlc3RNb2NrQ09SU1ZhbGlkYXRpb25GYWlsZWQiLCJuYW1lIiwib25SZXF1ZXN0VG8iLCJyZXF1ZXN0RmlsdGVyUnVsZUluaXQiLCJBUElFcnJvciIsIk1FU1NBR0UiLCJyZXF1ZXN0SG9va0NvbmZpZ3VyZUFQSUVycm9yIiwicmVzcG9uZCIsImJvZHkiLCJoZWFkZXJzIiwiUmVzcG9uc2VNb2NrIiwicnVsZSIsIlJlcXVlc3RGaWx0ZXJSdWxlIiwicmVxdWVzdEZpbHRlclJ1bGVzIiwicHVzaCIsInNldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2tCQWtEd0JBLGlCOztBQWxEeEI7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxXQUFOLFNBQTBCQyxjQUExQixDQUFzQztBQUNsQ0Msa0JBQWU7QUFDWCxjQUFNLEVBQU47O0FBRUEsYUFBS0MsNEJBQUwsR0FBb0MsSUFBcEM7QUFDQSxhQUFLQyxLQUFMLEdBQW9DLG1CQUFwQztBQUNIOztBQUVLQyxhQUFOLENBQWlCQyxLQUFqQixFQUF3QjtBQUFBOztBQUFBO0FBQ3BCLGtCQUFNQyxPQUFPLE1BQUtILEtBQUwsQ0FBV0ksR0FBWCxDQUFlRixNQUFNRyxrQkFBckIsQ0FBYjs7QUFFQUgsa0JBQU1JLE9BQU4sQ0FBY0gsSUFBZDtBQUhvQjtBQUl2Qjs7QUFFS0ksY0FBTixDQUFrQkwsS0FBbEIsRUFBeUI7QUFBQTs7QUFBQTtBQUNyQixnQkFBSUEsTUFBTU0sVUFBTixLQUFxQkMsd0RBQXpCLEVBQ0ksT0FBS0MsVUFBTCxDQUFnQkMsVUFBaEIsQ0FBMkJDLHlCQUFnQkMsK0JBQTNDLEVBQTRFakIsWUFBWWtCLElBQXhGLEVBQThGWixNQUFNRyxrQkFBcEc7QUFGaUI7QUFHeEI7O0FBRUQ7QUFDQVUsZ0JBQWFDLHFCQUFiLEVBQW9DO0FBQ2hDLFlBQUksS0FBS2pCLDRCQUFULEVBQ0ksTUFBTSxJQUFJa0IsaUJBQUosQ0FBYSxhQUFiLEVBQTRCQyxrQkFBUUMsNEJBQXBDLEVBQWtFdkIsWUFBWWtCLElBQTlFLEVBQW9GLDZIQUFwRixDQUFOOztBQUVKLGFBQUtmLDRCQUFMLEdBQW9DaUIscUJBQXBDOztBQUVBLGVBQU8sSUFBUDtBQUNIOztBQUVESSxZQUFTQyxJQUFULEVBQWViLFVBQWYsRUFBMkJjLE9BQTNCLEVBQW9DO0FBQ2hDLFlBQUksQ0FBQyxLQUFLdkIsNEJBQVYsRUFDSSxNQUFNLElBQUlrQixpQkFBSixDQUFhLFNBQWIsRUFBd0JDLGtCQUFRQyw0QkFBaEMsRUFBOER2QixZQUFZa0IsSUFBMUUsRUFBZ0YsbUpBQWhGLENBQU47O0FBRUosY0FBTVgsT0FBTyxJQUFJb0IsZ0NBQUosQ0FBaUJGLElBQWpCLEVBQXVCYixVQUF2QixFQUFtQ2MsT0FBbkMsQ0FBYjtBQUNBLGNBQU1FLE9BQU8sSUFBSUMscUNBQUosQ0FBc0IsS0FBSzFCLDRCQUEzQixDQUFiOztBQUVBLGFBQUsyQixrQkFBTCxDQUF3QkMsSUFBeEIsQ0FBNkJILElBQTdCO0FBQ0EsYUFBS3hCLEtBQUwsQ0FBVzRCLEdBQVgsQ0FBZUosSUFBZixFQUFxQnJCLElBQXJCO0FBQ0EsYUFBS0osNEJBQUwsR0FBb0MsSUFBcEM7O0FBRUEsZUFBTyxJQUFQO0FBQ0g7QUF6Q2lDOztBQTRDdkIsU0FBU0osaUJBQVQsR0FBOEI7QUFDekMsV0FBTyxJQUFJQyxXQUFKLEVBQVA7QUFDSCIsImZpbGUiOiJhcGkvcmVxdWVzdC1ob29rcy9yZXF1ZXN0LW1vY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVxdWVzdEhvb2sgZnJvbSAnLi9ob29rJztcbmltcG9ydCB7IFJlc3BvbnNlTW9jaywgUmVxdWVzdEZpbHRlclJ1bGUsIFNBTUVfT1JJR0lOX0NIRUNLX0ZBSUxFRF9TVEFUVVNfQ09ERSB9IGZyb20gJ3Rlc3RjYWZlLWhhbW1lcmhlYWQnO1xuaW1wb3J0IHsgQVBJRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMvcnVudGltZSc7XG5pbXBvcnQgTUVTU0FHRSBmcm9tICcuLi8uLi9lcnJvcnMvcnVudGltZS9tZXNzYWdlJztcbmltcG9ydCBXQVJOSU5HX01FU1NBR0UgZnJvbSAnLi4vLi4vbm90aWZpY2F0aW9ucy93YXJuaW5nLW1lc3NhZ2UnO1xuXG5jbGFzcyBSZXF1ZXN0TW9jayBleHRlbmRzIFJlcXVlc3RIb29rIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgIHN1cGVyKFtdKTtcblxuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQgPSBudWxsO1xuICAgICAgICB0aGlzLm1vY2tzICAgICAgICAgICAgICAgICAgICAgICAgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgb25SZXF1ZXN0IChldmVudCkge1xuICAgICAgICBjb25zdCBtb2NrID0gdGhpcy5tb2Nrcy5nZXQoZXZlbnQuX3JlcXVlc3RGaWx0ZXJSdWxlKTtcblxuICAgICAgICBldmVudC5zZXRNb2NrKG1vY2spO1xuICAgIH1cblxuICAgIGFzeW5jIG9uUmVzcG9uc2UgKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5zdGF0dXNDb2RlID09PSBTQU1FX09SSUdJTl9DSEVDS19GQUlMRURfU1RBVFVTX0NPREUpXG4gICAgICAgICAgICB0aGlzLndhcm5pbmdMb2cuYWRkV2FybmluZyhXQVJOSU5HX01FU1NBR0UucmVxdWVzdE1vY2tDT1JTVmFsaWRhdGlvbkZhaWxlZCwgUmVxdWVzdE1vY2submFtZSwgZXZlbnQuX3JlcXVlc3RGaWx0ZXJSdWxlKTtcbiAgICB9XG5cbiAgICAvLyBBUElcbiAgICBvblJlcXVlc3RUbyAocmVxdWVzdEZpbHRlclJ1bGVJbml0KSB7XG4gICAgICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgQVBJRXJyb3IoJ29uUmVxdWVzdFRvJywgTUVTU0FHRS5yZXF1ZXN0SG9va0NvbmZpZ3VyZUFQSUVycm9yLCBSZXF1ZXN0TW9jay5uYW1lLCBcIlRoZSAncmVzcG9uZCcgbWV0aG9kIHdhcyBub3QgY2FsbGVkIGFmdGVyICdvblJlcXVlc3RUbycuIFlvdSBtdXN0IGNhbGwgdGhlICdyZXNwb25kJyBtZXRob2QgdG8gcHJvdmlkZSB0aGUgbW9ja2VkIHJlc3BvbnNlLlwiKTtcblxuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0RmlsdGVyUnVsZUluaXQgPSByZXF1ZXN0RmlsdGVyUnVsZUluaXQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmVzcG9uZCAoYm9keSwgc3RhdHVzQ29kZSwgaGVhZGVycykge1xuICAgICAgICBpZiAoIXRoaXMucGVuZGluZ1JlcXVlc3RGaWx0ZXJSdWxlSW5pdClcbiAgICAgICAgICAgIHRocm93IG5ldyBBUElFcnJvcigncmVzcG9uZCcsIE1FU1NBR0UucmVxdWVzdEhvb2tDb25maWd1cmVBUElFcnJvciwgUmVxdWVzdE1vY2submFtZSwgXCJUaGUgJ29uUmVxdWVzdFRvJyBtZXRob2Qgd2FzIG5vdCBjYWxsZWQgYmVmb3JlICdyZXNwb25kJy4gWW91IG11c3QgY2FsbCB0aGUgJ29uUmVxdWVzdFRvJyBtZXRob2QgdG8gcHJvdmlkZSB0aGUgVVJMIHJlcXVlc3RzIHRvIHdoaWNoIGFyZSBtb2NrZWQuXCIpO1xuXG4gICAgICAgIGNvbnN0IG1vY2sgPSBuZXcgUmVzcG9uc2VNb2NrKGJvZHksIHN0YXR1c0NvZGUsIGhlYWRlcnMpO1xuICAgICAgICBjb25zdCBydWxlID0gbmV3IFJlcXVlc3RGaWx0ZXJSdWxlKHRoaXMucGVuZGluZ1JlcXVlc3RGaWx0ZXJSdWxlSW5pdCk7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0RmlsdGVyUnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgdGhpcy5tb2Nrcy5zZXQocnVsZSwgbW9jayk7XG4gICAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3RGaWx0ZXJSdWxlSW5pdCA9IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0TW9jayAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0TW9jaygpO1xufVxuIl19
